{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Docs","text":"<p>This file exists for <code>mkdocs</code>.</p>"},{"location":"diagrams/","title":"v0.0.1 diagrams","text":"<p>source: </p> <p>or use exported <code>.txt</code>: </p> <p></p> <p>or use exported <code>.txt</code>:  source: </p>"},{"location":"diagrams/#general-info","title":"General Info","text":""},{"location":"diagrams/#directories-in-this-repo","title":"Directories in this repo","text":"<ul> <li><code>src</code> contains the (hopefully) single-source-of-truth for the diagram</li> <li><code>gen</code> contains generated diagrams for easy inclusion/sharing</li> </ul> <p>For completeness, consider adding a note in this <code>README</code> how the diagram was generated. Multiple generated diagrams from one source is perfectly acceptable :smile:.</p>"},{"location":"diagrams/#diagramming-tools","title":"Diagramming-tools","text":""},{"location":"diagrams/#wsd","title":"<code>.wsd</code>","text":"<p>https://plantuml.com/</p> <p>VS Marketplace Link: https://marketplace.visualstudio.com/items?itemName=jebbs.plantuml</p>"},{"location":"diagrams/#seqdiag","title":"<code>.seqdiag</code>","text":"<p>https://github.com/blockdiag/seqdiag</p>"},{"location":"diagrams/#monopic","title":"<code>.monopic</code>","text":"<p>https://monodraw.helftone.com/</p>"},{"location":"diagrams/#various-early-diagrams","title":"Various early diagrams","text":""},{"location":"diagrams/#midi-ping-test","title":"midi-ping-test","text":"<p>source: </p> <p></p>"},{"location":"diagrams/#peer-to-peer_mid","title":"peer-to-peer_mid","text":"<p>source: </p>"},{"location":"diagrams/#clock_sync","title":"clock_sync","text":"<p>source: </p>"},{"location":"diagrams/#webrtc-connect","title":"webRTC-connect","text":"<p>source: </p> <p></p>"},{"location":"diagrams/#user-journey","title":"user-journey","text":"<p>source: </p> <p></p>"},{"location":"diagrams/#user-auth-flow","title":"user-auth-flow","text":"<p>source: </p> <p></p>"},{"location":"patterns/","title":"List of patterns and conventions","text":"<ul> <li>http services according to mat ryer</li> </ul>"},{"location":"patterns/#stdlib","title":"STDLib","text":"<pre><code>stdlib/\n    cmd/\n        main.go\n    user/\n        handler.go\n        service.go\n    auth/\n        handler.go\n        service.go\n    user.go\n    auth.go\n</code></pre>"},{"location":"patterns/#layers","title":"Layers","text":"<pre><code>layers/\n    cmd/\n        main.go\n    models/\n        user.go\n        auth.go\n    handlers/\n        user.go\n        auth.go\n    services/\n        user.go\n        auth.go\n</code></pre>"},{"location":"patterns/#hybrid","title":"Hybrid","text":"<pre><code>stdlib/\n    cmd/\n        main.go\n    models/\n        user.go\n        auth.go\n    user/\n        handler.go\n        service.go\n        types.go\n    auth/\n        handler.go\n        service.go\n        types.go\n</code></pre>"},{"location":"patterns/hybrid/auth/","title":"Index","text":"<p>here we put all Authentication related services such as the logic for authenticating user with email and password.</p>"},{"location":"patterns/hybrid/models/","title":"Index","text":"<p>all the types or structs needed to be imported across the packages goes here.</p>"},{"location":"patterns/hybrid/user/","title":"Index","text":"<p>all the CRUD logic for users and users database goes here.</p>"},{"location":"patterns/layers/handlers/","title":"Index","text":"<p>all of the handlers are put inside this package.</p>"},{"location":"patterns/layers/models/","title":"Index","text":"<p>all the types or structs needed to be imported across the packages goes here.</p>"},{"location":"patterns/layers/services/","title":"Index","text":"<p>all of the service logic for both auth and user are done here.</p>"},{"location":"patterns/stdlib/auth/","title":"Index","text":"<p>here we put all Authentication related services such as the logic for authenticating user with email and password.</p>"},{"location":"patterns/stdlib/user/","title":"Index","text":"<p>all the CRUD logic for users and users database goes here.</p>"},{"location":"research/","title":"Introduction","text":"<p>Here we collect (and learn about) all possible useful information.</p> <p>When programming Internet-applications, some basic networking knowledge about https://en.wikipedia.org/wiki/Internet_protocol_suite can be useful.</p> <p>When it comes to streaming audio/video or other realtime communications, some specific protocols have been developed over the years. We explore them a bit in StreamingProtocols.</p> <p>One particular interesting use-case that has been researched by audio professionals (and is also implemented by Apple in their OS's and therefore also known as AppleMIDI) is RTP-MIDI.</p> <p>All previous links serve more as background-information.</p> <p>Next we collect what could actually be useful for our project:</p>"},{"location":"research/#webrtc","title":"WebRTC","text":"<ul> <li>uses SCTP: Stream Control Transmission Protocol (transport layer protocol)</li> <li>uses DTLS: TLS for UDP- or SCTP-datagrams</li> <li>several Javascript API's:</li> <li><code>getUserMedia</code></li> <li><code>RTCPeerConnection</code></li> <li><code>RTCDataChannel</code> (similar API to websocket but latency)</li> <li><code>getStats</code></li> <li>requires SIP, SIP over websockets (RFC7118), XMPP (Jabber), ... for signaling</li> <li>The official examples:</li> <li>https://webrtc.github.io/samples/<ul> <li>https://github.com/webrtc/samples</li> </ul> </li> </ul> <p>Golang:</p> <ul> <li>https://libs.garden/go/search?q=webrtc</li> <li>https://pion.ly/</li> </ul>"},{"location":"research/#midi","title":"MIDI","text":"<ul> <li>https://github.com/ldrolez/free-midi-chords<ul> <li>Python-script to generate a midi-file for every chords (and chord-progressions) in all keys (7900+ midi-files)</li> </ul> </li> </ul> <p>Golang:</p> <ul> <li>https://libs.garden/go/search?q=midi</li> <li>https://github.com/gomidi/midi</li> <li>contains a WASM-example that can talk to real midi-hardware from the webbrowser!</li> </ul>"},{"location":"research/#music-theory-math","title":"Music theory / math","text":"<p>Golang:</p> <ul> <li>https://github.com/go-music-theory/music-theory</li> </ul>"},{"location":"research/#front-end-audiomidi","title":"Front-end audio/midi","text":"<ul> <li>https://jazz-soft.net/doc/</li> <li> <p>used in p2p-webrtc example</p> </li> <li> <p>https://github.com/joshreiss/Working-with-the-Web-Audio-API</p> </li> <li>many examples in tutorial-format about WebAudio</li> <li> <p>chapter 18 and 19 are about <code>AudioWorklet</code>'s (https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API/Using_AudioWorklet)</p> </li> <li> <p>https://web.dev/audio-scheduling/</p> </li> <li> <p>don't use <code>setTimeout</code> but <code>requestAnimationFrame</code> or custom system? </p> </li> <li> <p>https://meowni.ca/posts/metronomes/</p> </li> <li>blog article about keeping time in Javascript</li> <li>quite recent: 2019-09-10</li> <li> <p>compares</p> <ul> <li><code>setInterval</code></li> <li><code>setInterval</code> in a <code>Worker</code> </li> <li>prescheduled audio events in Web Audio API</li> </ul> </li> <li> <p>https://blog.logrocket.com/build-native-audio-plugin-elementary/</p> </li> <li> <p>an article about using the https://www.elementary.audio/ framework</p> <ul> <li>Elementary is not just front-end:</li> <li>for the front-end (web): https://www.elementary.audio/docs/packages/web-renderer</li> <li>local on a machine (nodejs): https://www.elementary.audio/docs/packages/node-renderer</li> <li>as a VST/AUv3-plugin for in a DAW: https://www.elementary.audio/docs/packages/plugin-renderer</li> <li>they have commercial aspirations:</li> <li>VST/AUv3-plugin not free ($$$)</li> <li>a marketplace for plugins: https://www.elementary.audio/marketplace</li> <li>...</li> </ul> </li> <li> <p>Soundfonts</p> </li> <li>https://github.com/gleitz/midi-js-soundfonts</li> </ul>"},{"location":"research/#wasm-and-golang","title":"WASM and Golang","text":"<ul> <li>https://github.com/wasmerio/wasmer-go</li> <li>go-interface around https://github.com/wasmerio/wasmer<ul> <li>wasmer allows running <code>.wasm</code>-executables even outside of the browser</li> </ul> </li> </ul>"},{"location":"research/#audio-processing","title":"Audio processing","text":"<ul> <li>https://engineering.atspotify.com/2022/06/meet-basic-pitch/</li> <li>research from<ul> <li>Spotify's Audio Intelligence Lab (https://research.atspotify.com/audio-intelligence/)</li> <li>https://www.soundtrap.com/</li> </ul> </li> <li>How to convert audio to midi, fast and in realtime</li> <li>uses ML (Machine Learning)</li> <li>...</li> </ul> <p>Golang:</p> <p>Most likely all audio-stuff in golang requires some non-Go-code (<code>cgo</code>, <code>clang</code>, ...) under the hood. This is not ideal! We must consider this as potential time-stealing problems when building/testing and at a later stage supportability. TODO: keep track of additional dependencies on each platform!</p> <ul> <li>https://github.com/faiface/beep</li> <li>uses https://github.com/hajimehoshi/oto<ul> <li>a low-level library to play sound</li> <li>cross-platform, even for mobile OS's?</li> </ul> </li> <li>https://github.com/MarkKremer/microphone</li> <li>uses https://github.com/gordonklaus/portaudio<ul> <li>a Go-interface around the http://www.portaudio.com/ audio-library</li> <li>cross-platform but apparently not really for mobile?</li> </ul> </li> </ul>"},{"location":"research/#websockets","title":"Websockets","text":"<p>See Websockets.md for some notes on the Websocket-protocol as per RFC's and other useful websites.</p> <p>Golang:</p> <ul> <li>https://pkg.go.dev/golang.org/x/net/websocket</li> <li>(per documentation:) lacks features</li> <li>https://github.com/gorilla/websocket</li> <li>(per documentation:) complete and tested, passes Autobahn Test Suite<ul> <li>https://github.com/crossbario/autobahn-testsuite</li> </ul> </li> <li>probably the most used websocket-implementation</li> <li>https://github.com/nhooyr/websocket</li> <li>passes Autobahn Test Suite</li> <li>Some interesting features that might make it more useful for our project<ul> <li>Zero alloc reads and writes</li> <li>Supports compiling to WASM</li> <li>solves a problem with closing handshake that gorilla still has (https://github.com/gorilla/websocket/issues/448)</li> </ul> </li> <li>https://github.com/gobwas/ws</li> <li>written for mail.ru to handle millions of users checking their e-mail, see https://www.freecodecamp.org/news/million-websockets-and-go-cc58418460bb</li> <li>speaks of Zero Copy HTTP Upgrades (https://github.com/gobwas/ws#zero-copy-upgrade)<ul> <li>this is when one client's HTTP-connection gets upgraded to a <code>ws</code>-connection</li> <li>important for when you have many millions of clients checking e-mail</li> <li>not very important for our use case since a jamming session would reasonably have only about a dozen people</li> <li>unless we want to make it MMOJ (Massive Multiplayer Online Jamming) :wink: but even then the joining a jam-session-part is not the real bottleneck</li> </ul> </li> <li>an example how to connect 2 go-apps: https://itnext.io/websocket-communication-between-two-go-programs-the-easy-way-d8c9cf40043f</li> </ul>"},{"location":"research/#websocket-performance","title":"Websocket performance","text":"<ul> <li>https://centrifugal.github.io/centrifugo/blog/scaling_websocket/</li> <li>setting up web sockets for scalability</li> <li>basically this article is promotion for https://github.com/centrifugal/centrifuge</li> <li> <p>talks about</p> <ul> <li>the different golang-libraries, author prefers gorilla</li> <li>OS-tuning: a file descriptor per connection? </li> <li>https://docs.riak.com/riak/kv/2.2.3/using/performance/open-files-limit.1.html</li> <li>linux: <code>ulimit -n</code></li> <li>macos: <code>launchctl limit maxfiles</code></li> <li> <p>or: https://pkg.go.dev/golang.org/x/net/netutil#LimitListener</p> </li> <li> <p>or some low-level TCP/IP-settings: https://gist.github.com/mustafaturan/47268d8ad6d56cadda357e4c438f51ca</p> </li> <li>pub/sub-brokers (RabbitMQ, Kafka, Redis, ...)</li> <li>massive reconnect problem</li> <li>benefits of using message event stream (a buffer with client-state)</li> <li>https://crossbario.com/blog/Dissecting-Websocket-Overhead/</li> <li>some benchmarks on a GbE-switch</li> </ul> </li> </ul>"},{"location":"research/#sse","title":"SSE","text":"<p>Server-Sent Events</p> <ul> <li>https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events<ul> <li>browser limit of 6 open connections when not using HTTP/2</li> </ul> </li> </ul>"},{"location":"research/#http2","title":"HTTP/2","text":"<ul> <li>https://stackoverflow.com/questions/28582935/does-http-2-make-websockets-obsolete<ul> <li>still request/response-based but with server push</li> <li>https://building.lang.ai/our-journey-from-websockets-to-http-2-4d069c54effd</li> <li>https://www.infoq.com/articles/websocket-and-http2-coexist/</li> </ul> </li> <li>https://datatracker.ietf.org/doc/html/rfc8441<ul> <li>from 2018-09</li> <li>Websocket over HTTP/2</li> </ul> </li> </ul>"},{"location":"research/#utility","title":"Utility","text":"<ul> <li>https://pkg.go.dev/golang.org/x/time/rate</li> <li>used in websocket-chat-example: https://github.com/nhooyr/websocket/blob/master/examples/chat</li> </ul>"},{"location":"research/RTP-MIDI/","title":"RTP-MIDI","text":"<ul> <li> <p>how to send MIDI over RTP</p> </li> <li> <p>https://en.wikipedia.org/wiki/RTP-MIDI</p> <ul> <li>AKA AppleMIDI</li> <li> <p>Compared to MIDI 1.0, RTP-MIDI includes new features like session management, device synchronization and detection of lost packets, with automatic regeneration of lost data.</p> </li> <li>inside macOS since 2005</li> <li>https://developer.apple.com/library/archive/documentation/Audio/Conceptual/MIDINetworkDriverProtocol/MIDI/MIDI.html</li> </ul> </li> <li>https://www.midi.org/specifications/midi-transports-specifications/rtp-midi</li> <li>https://john-lazzaro.github.io/rtpmidi/<ul> <li>a paper from 2004 by AES (Audio Engineering Society) about a very similar use-case: https://john-lazzaro.github.io/sa/pubs/pdf/aes117.pdf</li> </ul> </li> <li>https://www.rfc-editor.org/rfc/rfc4696.txt<ul> <li>An Implementation Guide for RTP MIDI</li> <li>November 2006</li> <li>talks about only 2 participants without firewalls and NAT --&gt; not our use-case</li> </ul> </li> <li>https://www.rfc-editor.org/rfc/rfc6295.txt<ul> <li>RTP Payload Format for MIDI</li> <li>June 2011</li> <li> <p>interoperable MIDI networking might foster network music performance applications, in which a group of musicians located at different physical locations interact over a network to perform as  they would if they were located in the same room</p> </li> <li> <p>these applications have not yet reached the mainstream.  However, experiments in academia and industry continue</p> </li> </ul> </li> </ul> <p>Golang:</p> <ul> <li>https://github.com/laenzlinger/go-midi-rtp</li> </ul>"},{"location":"research/StreamingProtocols/","title":"SIP","text":"<p>Session Initiation Protocol</p> <ul> <li>SIP is typically used for VoIP: SIP-phones</li> <li>SIP is a signaling protocol</li> <li>SIP has many similarities with HTTP and SMTP, like<ul> <li>it's text-based</li> <li>Requests have methods (<code>REGISTER</code>, <code>INVITE</code>, <code>ACK</code>, <code>BYE</code>, ...) similar to HTTP-methods (<code>GET</code>, <code>POST</code>, ...)</li> <li>Responses have status codes (<code>1xx</code>, <code>200</code>: success, <code>3xx</code>: redirection, <code>5xx</code>: server errors, ...)</li> </ul> </li> <li>SIP can use UDP, TCP or SCTP as transport protocols<ul> <li>TCP/UDP port numbers:<ul> <li>5060: non-encrypted</li> <li>5061: encrypted with TLS</li> </ul> </li> </ul> </li> <li>SIP UA's: Each UA (User Agent) is both client and server<ul> <li>UAC: User Agent Client</li> <li>UAS: User Agent Server</li> <li>UAC- and UAS-roles only last for duration of a SIP transaction</li> </ul> </li> <li>SIP Registrar: location service</li> </ul> <p>Sources:</p> <ul> <li>https://en.wikipedia.org/wiki/Session_Initiation_Protocol</li> </ul>"},{"location":"research/StreamingProtocols/#sdp","title":"SDP","text":"<p>Session Description Protocol</p> <ul> <li>SDP is used as the payload of some SIP-messages</li> <li>SDP can be used by 2 endpoints to negotiate network metrics, media types, ... (the session profile)</li> </ul>"},{"location":"research/StreamingProtocols/#rtp","title":"RTP","text":"<p>= Real-time Transport Protocol</p> <p>Also SRTP: Secure RTP (with TLS)</p> <ul> <li>for transmission of multimedia formats</li> <li>has different profiles or payload formats, like<ul> <li>for Audio and video conferences</li> <li>for <code>H.265</code>-encoded video</li> <li>!!! for MIDI !!!</li> <li>...</li> </ul> </li> </ul> <p>Golang:</p> <ul> <li>https://libs.garden/go/search?q=rtp</li> </ul>"},{"location":"research/StreamingProtocols/#rtcp","title":"RTCP","text":"<p>= RTP Control Protocol</p> <ul> <li>helps RTP-sessions (provides out-of-band statistics and control information)</li> <li>mainly for QoS (Quality of Service)</li> <li>statistics:<ul> <li>packet counts</li> <li>packet loss</li> <li>packet delay variation (jitter)</li> <li>round-trip delay time (RTT / ping-time)</li> </ul> </li> </ul> <p>sources:</p> <ul> <li>https://en.wikipedia.org/wiki/RTP_Control_Protocol</li> <li>https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API/Intro_to_RTP</li> </ul>"},{"location":"research/Websockets/","title":"Websockets","text":""},{"location":"research/Websockets/#tldr","title":"TLDR","text":"<p>Websockets can be called a wire-protocol where the smallest piece of communication is called the frame. For security, all frames from client to server are masked (i.e. XOR-encrypted). (Server-to-client frames are NOT masked.) The key used for masking is chosen by the client for each frame.</p> <p>Data-frames can be Text-frames or Binary-frames. An application-specific websocket-message could be sent over multiple data-frame's (especially bigger messages).</p> <p>Control-frames (like Ping-, Pong and Close-frames) are always &lt;= 125 bytes.</p> <p>Upon handshake (which happens over the <code>http(s)</code>-protocol), the client can negotiate subprotocols (like <code>wamp</code>) and extensions.  Of course, an application developer can choose their own protocol in stead of one of the existing ones.</p>"},{"location":"research/Websockets/#protocol","title":"Protocol","text":"<p>https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API/Writing_WebSocket_servers</p> <ul> <li>this is basically a synopsis of the RFC6455-spec, talks about</li> <li>The Websocket-handshake<ul> <li>client handshake requests</li> <li>server handshake responses</li> <li>keeping track of clients</li> <li><code>258EAFA5-E914-47DA-95CA-C5AB0DC85B11</code> is a special UUID used by websocket-servers to prove to the client a handshake was received</li> </ul> </li> <li>Data frames<ul> <li>frames are in fact just a bunch of bytes that we could call a packet or a message but depending on context one uses the frame-moniker</li> <li>Similar to how one speaks about Ethernet-frames (layer 2 data that travel over a wire) but IP-packets (layer 3 bytes that travel through IP-routers)</li> <li>big websocket messages can be split (fragmented) over several frames.</li> <li>We could also say a frame is a wire-format.</li> </ul> </li> <li>Pings and pongs (heartbeat)</li> <li>Extensions (to the base websocket-protocol)</li> <li>Subprotocols (what structure the ws-messages have, compare with XML schema)</li> </ul> <p>Frame format:</p> <p><pre><code>      0                   1                   2                   3\n      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-------+-+-------------+-------------------------------+\n     |F|R|R|R| opcode|M| Payload len |    Extended payload length    |\n     |I|S|S|S|  (4)  |A|     (7)     |             (16/64)           |\n     |N|V|V|V|       |S|             |   (if payload len==126/127)   |\n     | |1|2|3|       |K|             |                               |\n     +-+-+-+-+-------+-+-------------+ - - - - - - - - - - - - - - - +\n     |     Extended payload length continued, if payload len == 127  |\n     + - - - - - - - - - - - - - - - +-------------------------------+\n     |                               |Masking-key, if MASK set to 1  |\n     +-------------------------------+-------------------------------+\n     | Masking-key (continued)       |          Payload Data         |\n     +-------------------------------- - - - - - - - - - - - - - - - +\n     :                     Payload Data continued ...                :\n     + - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +\n     |                     Payload Data continued ...                |\n     +---------------------------------------------------------------+\n</code></pre> - <code>FIN</code> (1 bit): set when this frame is the end of a message, if <code>0</code> the server keeps listening for more parts of the message - <code>RSV1/2/3</code>: only used by extensions - <code>MASK</code> (1 bit): set to indicate the messages sent by the client (client -&gt; server) are masked AKA XOR-encrypted   - all messages from the client should be masked!     - client should discard received masked messages     - server should discard received unmasked messages and immediately close connection   - client needs to set the <code>Masking-key</code> with which it encoded the payload   - server will need to read the <code>Masking-key</code> to decode the payload - <code>opcode</code> (4 bits): indicates what kind of frame this is   - <code>0x0</code>: continuation frame   - <code>0x1</code>: text frame   - <code>0x2</code>: binary frame   - <code>0x8</code>: connection close frame   - <code>0x9</code>: ping frame   - <code>0xA</code>: pong frame - <code>payload len</code> (7 bits): enough for when payload <code>&lt; 125</code>   - <code>126</code>: more payload length-bits to fetch from <code>extended payload length</code>   - <code>127</code>: more payload length-bits to fetch from <code>extended payload length continued</code></p> <p>Example of message-flow (1 message sent over 4 frames):</p> <p><pre><code>Client: FIN=1, opcode=0x1, msg=\"hello\"\nServer: (process complete message immediately) Hi.\nClient: FIN=0, opcode=0x1, msg=\"and a\"\nServer: (listening, new message containing text started)\nClient: FIN=0, opcode=0x0, msg=\"happy new\"\nServer: (listening, payload concatenated to previous message)\nClient: FIN=1, opcode=0x0, msg=\"year!\"\nServer: (process complete message) Happy new year to you too!\n</code></pre> - only text- (opcode <code>0x1</code>) and binary-frames (opcode <code>0x2</code>) can be fragmented - opcode <code>0x0</code> means this payload should be added to the previous one to complete the message - opcode <code>0x0</code> with <code>FIN</code>=<code>1</code> means the message is complete and can be processed   - apparently a complete message can be added to anyway? - <code>pings</code> and <code>pongs</code>   - they are control frames   - when receiving a ping, other side should send a pong ASAP (if connection still open)   - pong uses same payload as what was sent by ping   - max. payload: <code>125</code> - closing handshake   - peer sends a <code>0x8</code>-control frame   - other peer replies   - first peer closes connection</p>"},{"location":"research/Websockets/#some-notes-from-rfc6455","title":"Some notes from RFC6455:","text":"<ul> <li>The Handshake</li> <li>The Request<ul> <li>required headers:</li> <li><code>Request-URI</code></li> <li><code>Host</code> indicates servers authority (important for Same-Origin Policy / cross-site scripting) (RFC6454)</li> <li><code>Origin</code> (only required if coming from a browser client)</li> <li><code>Connection: Upgrade</code></li> <li><code>Sec-WebSocket-Key: ...</code> (base64-encoded 16-byte value)</li> <li><code>Sec-WebSocket-Version: 13</code></li> <li>optional headers:</li> <li><code>Sec-WebSocket-Protocol</code>: comma-separated list of Subprotocols (they structure the websocket-payload (e.g. <code>wamp</code>)) the client wishes to speak<ul> <li>the server can only reply with 1 subprotocol it will speak with the client</li> </ul> </li> <li><code>Sec-WebSocket-Extensions</code>: which protocol-level extensions (that modify the websocket-payload) the client wishes to speak</li> <li>cookies</li> </ul> </li> <li>The Response<ul> <li>required headers:</li> <li><code>101</code>: switching protocols</li> <li><code>Upgrade: websocket</code></li> <li><code>Connection: Upgrade</code></li> <li><code>Sec-WebSocket-Accept</code>: a computed field:<ul> <li>concat key with <code>Sec-WebSocket-Key</code> from client with the fixed value <code>258EAFA5-E914-47DA-95CA-C5AB0DC85B11</code></li> <li>take SHA-1-hash</li> <li>base64-encode</li> </ul> </li> <li>optional headers:</li> <li><code>Sec-WebSocket-Protocol</code></li> <li><code>Sec-WebSocket-Extensions</code> (multiple extensions can be used)</li> </ul> </li> <li>Masking</li> <li>Why?<ul> <li>security for attacks on infrastructure: proxies could alter client-messages, send fake messages, poison caches, ...</li> </ul> </li> <li>How?<ul> <li>client choses a random key for each frame</li> <li>key must be cryptographically secure AKA from strong source of entropy (RFC4086)<ul> <li>i.e. not predictable from masking keys used in previous frames</li> </ul> </li> <li>masking-algorithm is XOR-based, doesn't change payload-length</li> </ul> </li> </ul>"},{"location":"research/Websockets/#more-information","title":"More information","text":"<ul> <li>https://lucumr.pocoo.org/2012/9/24/websockets-101/</li> <li>by Armin Ronacher, creator of flask</li> <li>Keep in mind: it's an OLD document (2012)</li> <li>advises to always use websocket through TLS so intermediates can't mess it up</li> <li>different URL-scheme ( <code>ws(s)</code>) with specific grammar<ul> <li>no anchors (<code>#foo</code>)</li> </ul> </li> <li>problems with HTTP/TCP-proxies</li> <li>doesn't like that ping/pong has payload (the websocket-browser-API doesn't add payload?)</li> <li>closing handshake: client is supposed to give server some time to close<ul> <li>Firefox cares and will also reconnect after TCP disonnection?</li> </ul> </li> <li>if no browser required, just speak TCP?</li> <li>https://hpbn.co/websocket/</li> <li>one chapter of the book High Performance Browser Networking by Ilya Grigorik (publisher: O'Reilly)</li> <li>https://www.igvita.com/</li> <li>the book WebSocket, Lightweight Client-Server Communications by Andrew Lombardi (publisher: O'Reilly)</li> </ul>"},{"location":"research/Websockets/#reference","title":"Reference","text":"<p>https://www.iana.org/assignments/websocket/websocket.xml</p> <p>Check this for:</p> <ul> <li>supported subprotocols like <code>wamp</code></li> <li>version numbers (we're currently at 13 with RFC6455)</li> <li>close codes (<code>1000</code>: normal closure, <code>1002</code>: protocol error, ...)</li> <li>opcodes (<code>TextFrame</code>, <code>BinaryFrame</code>, <code>PingFrame</code>, <code>PongFrame</code>, ...)</li> </ul>"}]}